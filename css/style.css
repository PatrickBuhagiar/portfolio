/**
      0 - 600px:  Phone
    600 - 900px:  Tablet Portrait
   900 - 1200px:  Tablet landscape
[1200 - 1800px]:  Our Normal Styles apply
      1800px + :  Big Desktop

  $breakpoint argument choices:
    - phone
    - tab-port
    - tab-land
    - big-desktop

    em is the best option for media queries, not rem.

    ORDER to making stuff responsive:
      Base + typography > general layout + grid > page layout > components
 */
*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  /*
  Automatically inherit in all elements whatever we set
  in body.
   */
  box-sizing: inherit; }

html {
  box-sizing: border-box;
  /*

  This will act as a basis for all our REM calculations.

  The root font size is usually 16px. So 10px is 62.5%,
  and thus 1REM = 10px.

  REM is not supported by IE < 9
  */
  font-size: 62.5%; }
  @media only screen and (max-width: 75em) {
    html {
      font-size: 56.25%; } }
  @media only screen and (max-width: 56.25em) {
    html {
      font-size: 50%; } }
  @media only screen and (min-width: 112.5em) {
    html {
      font-size: 75%; } }

body {
  height: 100%;
  width: 100%; }

.container {
  display: grid;
  grid-template-rows: 80vh min-content 40vw repeat(3, min-content);
  grid-template-columns: [left-pad-start] minmax(6rem, 1fr) [center-start] repeat(8, [col-start] minmax(min-content, 14rem) [col-end]) [center-end] minmax(6rem, 1fr) [right-pad-end]; }

@keyframes moveInLeft {
  /* Best practice is to always
     animate the opacity and transform
     properties for best performance */
  0% {
    /* start */
    opacity: 0;
    transform: translateX(-10em); }
  100% {
    /* finish */
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInRight {
  /* Best practice is to always
     animate the opacity and transform
     properties for best performance */
  0% {
    /* start */
    opacity: 0;
    transform: translateX(10rem); }
  100% {
    /* finish */
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInBottom {
  /* Best practice is to always
     animate the opacity and transform
     properties for best performance */
  0% {
    /* start */
    opacity: 0;
    transform: translateY(3rem); }
  100% {
    /* finish */
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInTop {
  /* Best practice is to always
     animate the opacity and transform
     properties for best performance */
  0% {
    /* start */
    opacity: 0;
    transform: translateY(-3rem); }
  100% {
    /* finish */
    opacity: 1;
    transform: translate(0); } }

body {
  font-family: "Montserrat", sans-serif;
  color: #1D2731;
  font-weight: 300;
  line-height: 1.6; }

.heading-1, .heading-2, .heading-3, .heading-4, .heading-5 {
  font-family: "Fjalla One", sans-serif;
  font-weight: 400;
  text-shadow: 0.3rem 0.3rem 1rem rgba(0, 0, 0, 0.4);
  text-transform: uppercase; }

.heading-1 {
  font-size: 7rem;
  letter-spacing: 2px; }

.heading-2 {
  font-size: 4rem; }

.heading-3 {
  font-size: 2rem; }

.heading-4 {
  font-size: 1.6rem; }

.heading-5 {
  font-size: 1.2rem; }

strong {
  font-weight: 600; }

.p1, .p2, .p3 {
  font-weight: 400;
  color: #f5f5f5;
  text-shadow: 0.5rem 1rem 2rem rgba(0, 0, 0, 0.4); }

.p1 {
  font-size: 3rem; }

.p2 {
  font-size: 2rem; }

.p3 {
  font-size: 1.6rem; }

header.header {
  display: grid;
  grid-column: 1 / -1;
  grid-row-gap: 1.5rem;
  grid-template-rows: 1fr minmax(16rem, max-content) 1fr;
  grid-template-columns: 1fr minmax(50%, min-content) 3fr; }

section.work-experience {
  grid-column: center-start / center-end;
  grid-row: 2; }

section.projects {
  grid-column: center-start / center-end;
  background-color: orangered; }

section.skills {
  grid-column: center-start / center-end;
  background-color: navy; }

footer.footer {
  grid-column: 1 / -1;
  background-color: greenyellow; }

.header {
  background-image: linear-gradient(to bottom left, #0b3c5d, rgba(11, 60, 93, 0.7)), url("../../img/header-large.jpg");
  background-size: cover;
  background-position: top;
  height: 75vh;
  backface-visibility: hidden;
  transition: all .4s; }
  @supports (clip-path: polygon(0 0)) or (-webkit-clip-path: polygon(0 0)) {
    .header {
      -webkit-clip-path: polygon(0 0, 100% 0, 100% 60vh, 0 100%);
      clip-path: polygon(0 0, 100% 0, 100% 60vh, 0 100%); } }
  .header__text {
    grid-column: 2 / span 1;
    grid-row: 2 / span 1; }
  .header__greeting {
    color: #f5f5f5;
    animation: moveInLeft 1.5s cubic-bezier(0.65, 0.05, 0.36, 1); }
  .header__intro {
    animation: moveInRight 1.5s cubic-bezier(0.65, 0.05, 0.36, 1) 1.3s;
    animation-fill-mode: backwards;
    display: flex;
    flex-wrap: wrap; }

.work-experience {
  display: grid;
  grid-gap: 3rem;
  margin-bottom: 3rem; }
  .work-experience__card {
    display: grid;
    grid-template-columns: 22rem minmax(20rem, max-content);
    grid-gap: 3rem; }
  .work-experience__heading {
    margin-right: 1rem;
    display: grid;
    grid-template-rows: repeat(4, minmax(3rem, min-content));
    grid-template-columns: minmax(3rem, min-content) 1fr; }
  .work-experience__icon {
    width: 1.75rem;
    height: 1.75rem;
    margin-right: 2rem;
    margin-top: -5px;
    fill: currentColor;
    justify-self: right;
    align-self: center;
    grid-column: 1 / 2;
    grid-row: 1 / 2; }
  .work-experience__name {
    grid-column: 2 / -1;
    grid-row: 1 / 2; }
  .work-experience__location {
    grid-column: 2 / -1;
    grid-row: 2 / 3; }
    .work-experience__location__icon {
      width: 1.75rem;
      height: 1.75rem;
      margin-right: 2rem;
      margin-top: -5px;
      fill: currentColor;
      justify-self: right;
      align-self: center;
      grid-column: 1 / 2;
      grid-row: 2 / 3; }
  .work-experience__role {
    grid-column: 2 / -1;
    grid-row: 3 / 4; }
  .work-experience__dates {
    font-weight: 500;
    grid-column: 2 / -1;
    grid-row: 4 / 5; }
  .work-experience__description > * {
    font-size: 1.5rem; }
  .work-experience__description__sublist > * {
    margin-left: 2rem; }

li {
  list-style: none; }
  li::before {
    content: "";
    display: inline-block;
    height: 1rem;
    width: 1rem;
    margin-right: .7rem;
    background-image: url(../../img/SVG/arrow_forward_ios.svg);
    background-size: cover; }
    @supports (-webkit-mask-image: none) or (mask-image: none) {
      li::before {
        background-color: #1D2731;
        -webkit-mask-image: url(../../img/SVG/arrow_forward_ios.svg);
        -webkit-mask-size: cover;
        mask-image: url(../../img/SVG/arrow_forward_ios.svg);
        mask-size: cover;
        background-image: none; } }

/*
Notes:

box model default:
    - everything is a rectangle with:
        - content
        - width
        - height
        - padding
        - border
        - margin
        - fill area (area that gets filled with background color)
    - total width = r border + r padding + specified width + l padding + l border
    - total height = t border + t padding + specified height + b padding + b border

box model border-box
    - the specified width and height will span across border and padding,
      not just content area

box types:
    - block-level
        - elements formatted visually as blocks
        - 100% of parent's width
        - vertically, one after another
        - box-model applies
        - e.g.
            display: block, flex, list-item, table
    - inline
        - content is distributed in lines
        - occupies only content's space
        - no line-breaks
        - no heights and widths
        - padding and margins only horizontal
        - e.g.
            display: inline-block
    - inline-block
        - a mix of both
        - occupies only content's space
        - no line-breaks
        - box-model applies as showed
        - e.g.
            display: inline

positioning:
    - normal flow
        - default
        - not floated
        - not absolutely positioned
        - elements laid out according to their source order
        - e.g.
            - position: relative
    - floats
        - Element is removed from the normal flow
        - Text and inline elements will wrap around the floated element.
        - The container will not adjust its height to the element.
        - e.g.
            - float: left, float: right
    - Absolute positioning
        - element is removed from the normal flow
        - no impact on surrounding content or elements
        - we use top/bottom/left/right to offset the element from its relatively positioned container.
        - e.g.
            - position: absolute, position: fixed

stacking contexts
    - z-index (there are other ways, lke transform and filter)
*/
